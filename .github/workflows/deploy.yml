name: MSA CI/CD (paths-filter + matrix)

on:
  push:
    branches: [ "release" ]
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: deploy-release
  cancel-in-progress: true

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

jobs:
  filter:
    runs-on: ubuntu-latest
    outputs:
      compose: ${{ steps.filter.outputs.compose }}
      common:  ${{ steps.filter.outputs.common }}
      gateway: ${{ steps.filter.outputs.gateway }}
      auth:    ${{ steps.filter.outputs.auth }}
      store:   ${{ steps.filter.outputs.store }}
      shorts:  ${{ steps.filter.outputs.shorts }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 첫 배포/수동 실행 예외처리
      - name: Compute base SHA (handle first push / dispatch)
        id: base
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            BEFORE="${{ github.event.before }}"
            if [ -z "$BEFORE" ] || [ "$BEFORE" = "0000000000000000000000000000000000000000" ]; then
              ROOT=$(git rev-list --max-parents=0 HEAD)
              echo "base=$ROOT" >> $GITHUB_OUTPUT
            else
              echo "base=$BEFORE" >> $GITHUB_OUTPUT
            fi
          else
            # workflow_dispatch: 직전 커밋과 비교(없으면 루트)
            if git rev-parse HEAD^ >/dev/null 2>&1; then
              echo "base=$(git rev-parse HEAD^)" >> $GITHUB_OUTPUT
            else
              echo "base=$(git rev-list --max-parents=0 HEAD)" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Detect changed paths
        id: filter
        uses: dorny/paths-filter@v3.0.2
        with:
          base: ${{ steps.base.outputs.base }}
          ref:  ${{ github.sha }}
          list-files: none
          filters: |
            compose:
              - 'docker-compose.prod.yml'
            common:
              - 'settings.gradle*'
              - 'build.gradle*'
              - 'gradle/**'
              - 'common/**'
              - '.github/workflows/deploy.yml'  # 임시: CI 변경으로도 트리거
            gateway:
              - 'gateway/**'
            auth:
              - 'auth-service/**'
            store:
              - 'store-service/**'
            shorts:
              - 'shorts-service/**'

  plan:
    needs: filter
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.mk.outputs.matrix }}
      compose_changed: ${{ steps.mk.outputs.compose_changed }}
      has_targets: ${{ steps.mk.outputs.has_targets }}
    steps:
      - name: Build service matrix from filters
        id: mk
        shell: bash
        run: |
          changed_compose='${{ needs.filter.outputs.compose }}'
          changed_common='${{ needs.filter.outputs.common }}'
          changed_gateway='${{ needs.filter.outputs.gateway }}'
          changed_auth='${{ needs.filter.outputs.auth }}'
          changed_store='${{ needs.filter.outputs.store }}'
          changed_shorts='${{ needs.filter.outputs.shorts }}'

          tb() { [ "$1" = "true" ] && echo true || echo false; }

          CHANGED_COMPOSE=$(tb "$changed_compose")
          CHANGED_COMMON=$(tb "$changed_common")
          CHANGED_GATEWAY=$(tb "$changed_gateway")
          CHANGED_AUTH=$(tb "$changed_auth")
          CHANGED_STORE=$(tb "$changed_store")
          CHANGED_SHORTS=$(tb "$changed_shorts")

          add() {
            local service="$1" module="$2" image="$3" compose_name="$4" build="$5"
            ITEMS+="{\"service\":\"$service\",\"module\":\"$module\",\"image\":\"$image\",\"compose\":\"$compose_name\",\"build\":$build},"
          }

          ITEMS=""

          # build = 서비스 자체 변경 OR 공용 변경
          include_svc() {
            local svc="$1" module="$2" image="$3" compose="$4" svc_changed="$5"
            local build=$([ "$svc_changed" = true ] || [ "$CHANGED_COMMON" = true ] && echo true || echo false)
            # 포함 조건: build == true  OR  CHANGED_COMPOSE == true (compose만 바뀌어도 재배포 필요)
            if [ "$build" = true ] || [ "$CHANGED_COMPOSE" = true ]; then
              add "$svc" "$module" "$image" "$compose" "$build"
            fi
          }

          include_svc "gateway"        "gateway"        "aivle-gateway"  "gateway"        "$CHANGED_GATEWAY"
          include_svc "auth-service"   "auth-service"   "aivle-auth"     "auth-service"   "$CHANGED_AUTH"
          include_svc "store-service"  "store-service"  "aivle-store"    "store-service"  "$CHANGED_STORE"
          include_svc "shorts-service" "shorts-service" "aivle-shorts"   "shorts-service" "$CHANGED_SHORTS"

          ITEMS="[${ITEMS%,}]"

          echo "matrix={\"include\":$ITEMS}" >> $GITHUB_OUTPUT
          echo "compose_changed=$CHANGED_COMPOSE" >> $GITHUB_OUTPUT
          if [ "$ITEMS" != "[]" ]; then
            echo "has_targets=true" >> $GITHUB_OUTPUT
          else
            echo "has_targets=false" >> $GITHUB_OUTPUT
          fi

  upload-compose:
    needs: plan
    runs-on: ubuntu-latest
    steps:
      - name: No compose changes
        if: ${{ needs.plan.outputs.compose_changed != 'true' }}
        run: echo "compose not changed; skipping upload"

      - uses: actions/checkout@v4
        if: ${{ needs.plan.outputs.compose_changed == 'true' }}

      - name: Validate compose (syntax check)
        if: ${{ needs.plan.outputs.compose_changed == 'true' }}
        run: docker compose -f docker-compose.prod.yml config -q

      - name: Prepare prod compose
        if: ${{ needs.plan.outputs.compose_changed == 'true' }}
        run: cp docker-compose.prod.yml docker-compose.yml

      - name: Upload docker-compose.yml to server
        if: ${{ needs.plan.outputs.compose_changed == 'true' }}
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AWS_SECRET_HOST }}
          username: ubuntu
          key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          source: "docker-compose.yml"
          target: "/home/ubuntu/deploy/"

  deploy:
    needs: [ plan, upload-compose ]
    if: ${{ needs.plan.outputs.has_targets == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.plan.outputs.matrix) }}
    env:
      APP_YML_GATEWAY: ${{ secrets.APPLICATION_YML_GATEWAY }}
      APP_YML_AUTH:    ${{ secrets.APPLICATION_YML_AUTH }}
      APP_YML_STORE:   ${{ secrets.APPLICATION_YML_STORE }}
      APP_YML_SHORTS:  ${{ secrets.APPLICATION_YML_SHORTS }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      - name: Create application.yml for ${{ matrix.service }}
        shell: bash
        run: |
          mkdir -p ./${{ matrix.module }}/src/main/resources
          case "${{ matrix.module }}" in
            gateway)        APP_YML="$APP_YML_GATEWAY" ;;
            auth-service)   APP_YML="$APP_YML_AUTH" ;;
            store-service)  APP_YML="$APP_YML_STORE" ;;
            shorts-service) APP_YML="$APP_YML_SHORTS" ;;
          esac
          cat <<EOF > ./${{ matrix.module }}/src/main/resources/application.yml
          ${APP_YML}
          EOF

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # build=true일 때만 빌드
      - name: Build JAR
        if: ${{ matrix.build == true }}
        run: ./gradlew :${{ matrix.module }}:clean :${{ matrix.module }}:build

      - name: Docker login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ env.DOCKER_USERNAME }}" --password-stdin

      - name: Docker build & push
        if: ${{ matrix.build == true }}
        env:
          IMG: ${{ env.DOCKER_USERNAME }}/${{ matrix.image }}
          SHA: ${{ github.sha }}
        run: |
          docker build -t "$IMG:latest" -t "$IMG:${SHA}" ./${{ matrix.module }}
          docker push "$IMG:latest"
          docker push "$IMG:${SHA}"

      # 재배포 (compose만 바뀐 경우도 여기서 처리)
      - name: Deploy ${{ matrix.service }} to server
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.AWS_SECRET_HOST }}
          username: ubuntu
          key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          script: |
            set -e
            cd /home/ubuntu/deploy/
            tmp_env=$(mktemp)
            grep -v '^DOCKER_USERNAME=' .env > "$tmp_env" || true
            echo "DOCKER_USERNAME=${{ env.DOCKER_USERNAME }}" >> "$tmp_env"
            mv "$tmp_env" .env
            docker compose pull ${{ matrix.compose }}
            docker compose up -d --no-deps ${{ matrix.compose }}
            docker image prune -f || true